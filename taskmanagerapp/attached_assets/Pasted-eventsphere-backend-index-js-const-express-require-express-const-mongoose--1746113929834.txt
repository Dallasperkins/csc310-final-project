eventsphere/
├── backend/
│   ├── index.js
const express = require('express');
const mongoose = require('mongoose');
const jwt = require('jsonwebtoken');
const cors = require('cors');
const User = require('./models/User');
const Event = require('./models/Event');

const app = express();
app.use(cors());
app.use(express.json());

// Connect to MongoDB (replace with your MongoDB Atlas URI)
mongoose.connect('mongodb+srv://<username>:<password>@cluster0.mongodb.net/eventsphere', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

// Middleware to verify JWT
const authMiddleware = (req, res, next) => {
  const token = req.header('Authorization')?.replace('Bearer ', '');
  if (!token) return res.status(401).json({ error: 'No token provided' });
  try {
    const decoded = jwt.verify(token, 'your-secret-key');
    req.userId = decoded.userId;
    next();
  } catch (err) {
    res.status(401).json({ error: 'Invalid token' });
  }
};

// Register
app.post('/api/register', async (req, res) => {
  const { email, password } = req.body;
  try {
    const user = new User({ email, password });
    await user.save();
    res.json({ message: 'User registered' });
  } catch (err) {
    res.status(400).json({ error: 'Email already exists' });
  }
});

// Login
app.post('/api/login', async (req, res) => {
  const { email, password } = req.body;
  const user = await User.findOne({ email, password });
  if (!user) return res.status(401).json({ error: 'Invalid credentials' });
  const token = jwt.sign({ userId: user._id }, 'your-secret-key');
  res.json({ token });
});

// Create Event
app.post('/api/events', authMiddleware, async (req, res) => {
  const { title, category, date, location } = req.body;
  const event = new Event({ title, category, date, location, creator: req.userId });
  await event.save();
  res.json({ message: 'Event created' });
});

// Get Events
app.get('/api/events', async (req, res) => {
  const { category } = req.query;
  const query = category ? { category } : {};
  const events = await Event.find(query);
  res.json(events);
});

// RSVP to Event
app.post('/api/events/:id/rsvp', authMiddleware, async (req, res) => {
  const event = await Event.findById(req.params.id);
  if (!event) return res.status(404).json({ error: 'Event not found' });
  if (!event.rsvps.includes(req.userId)) {
    event.rsvps.push(req.userId);
    await event.save();
  }
  res.json({ message: 'RSVP successful' });
});

app.listen(5000, () => console.log('Server running on port 5000'));

│   ├── models/User.js
const mongoose = require('mongoose');
const userSchema = new mongoose.Schema({
  email: { type: String, required: true, unique: true },
  password: { type: String, required: true },
});
module.exports = mongoose.model('User', userSchema);

│   ├── models/Event.js
const mongoose = require('mongoose');
const eventSchema = new mongoose.Schema({
  title: { type: String, required: true },
  category: { type: String, required: true },
  date: { type: String, required: true },
  location: { type: String, required: true },
  creator: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },
  rsvps: [{ type: mongoose.Schema.Types.ObjectId, ref: 'User' }],
});
module.exports = mongoose.model('Event', eventSchema);

│   ├── package.json
{
  "name": "eventsphere-backend",
  "version": "1.0.0",
  "scripts": {
    "start": "node index.js",
    "test": "echo 'Add tests here'"
  },
  "dependencies": {
    "cors": "^2.8.5",
    "express": "^4.17.1",
    "jsonwebtoken": "^8.5.1",
    "mongoose": "^6.0.12"
  }
}

├── frontend/
│   ├── src/
│   │   ├── components/Login.js
import React, { useState } from 'react';
import axios from 'axios';

const Login = ({ setToken }) => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [isRegister, setIsRegister] = useState(false);

  const handleSubmit = async (e) => {
    e.preventDefault();
    const endpoint = isRegister ? '/api/register' : '/api/login';
    try {
      const res = await axios.post(`http://localhost:5000${endpoint}`, { email, password });
      if (!isRegister) {
        setToken(res.data.token);
      } else {
        alert('Registration successful! Please log in.');
        setIsRegister(false);
      }
    } catch (err) {
      alert(err.response.data.error);
    }
  };

  return (
    <div className="container mt-5">
      <h2>{isRegister ? 'Register' : 'Login'}</h2>
      <form onSubmit={handleSubmit}>
        <div className="mb-3">
          <label>Email</label>
          <input
            type="email"
            className="form-control"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            required
          />
        </div>
        <div className="mb-3">
          <label>Password</label>
          <input
            type="password"
            className="form-control"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            required
          />
        </div>
        <button type="submit" className="btn btn-primary">
          {isRegister ? 'Register' : 'Login'}
        </button>
        <button
          type="button"
          className="btn btn-link"
          onClick={() => setIsRegister(!isRegister)}
        >
          {isRegister ? 'Switch to Login' : 'Switch to Register'}
        </button>
      </form>
    </div>
  );
};

export default Login;

│   │   ├── components/EventList.js
import React, { useState, useEffect } from 'react';
import axios from 'axios';

const EventList = ({ token }) => {
  const [events, setEvents] = useState([]);
  const [category, setCategory] = useState('');

  useEffect(() => {
    const fetchEvents = async () => {
      const res = await axios.get('http://localhost:5000/api/events', {
        params: { category },
      });
      setEvents(res.data);
    };
    fetchEvents();
  }, [category]);

  const handleRSVP = async (eventId) => {
    try {
      await axios.post(
        `http://localhost:5000/api/events/${eventId}/rsvp`,
        {},
        { headers: { Authorization: `Bearer ${token}` } }
      );
      alert('RSVP successful!');
    } catch (err) {
      alert(err.response.data.error);
    }
  };

  return (
    <div className="container mt-5">
      <h2>Events</h2>
      <div className="mb-3">
        <label>Filter by Category</label>
        <select
          className="form-control"
          value={category}
          onChange={(e) => setCategory(e.target.value)}
        >
          <option value="">All</option>
          <option value="Music">Music</option>
          <option value="Tech">Tech</option>
          <option value="Sports">Sports</option>
        </select>
      </div>
      <div className="row">
        {events.map((event) => (
          <div key={event._id} className="col-md-4 mb-3">
            <div className="card">
              <div className="card-body">
                <h5 className="card-title">{event.title}</h5>
                <p className="card-text">
                  Category: {event.category}<br />
                  Date: {event.date}<br />
                  Location: {event.location}
                </p>
                <button
                  className="btn btn-primary"
                  onClick={() => handleRSVP(event._id)}
                >
                  RSVP
                </button>
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default EventList;

│   │   ├── components/EventForm.js
import React, { useState } from 'react';
import axios from 'axios';

const EventForm = ({ token }) => {
  const [title, setTitle] = use  = useState('');
  const [category, setCategory] = useState('');
  const [date, setDate] = useState('');
  const [location, setLocation] = useState('');

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      await axios.post(
        'http://localhost:5000/api/events',
        { title, category, date, location },
        { headers: { Authorization: `Bearer ${token}` } }
      );
      alert('Event created!');
      setTitle('');
      setCategory('');
      setDate('');
      setLocation('');
    } catch (err) {
      alert(err.response.data.error);
    }
  };

  return (
    <div className="container mt-5">
      <h2>Create Event</h2>
      <form onSubmit={handleSubmit}>
        <div className="mb-3">
          <label>Title</label>
          <input
            type="text"
            className="form-control"
            value={title}
            onChange={(e) => setTitle(e.target.value)}
            required
          />
        </div>
        <div className="mb-3">
          <label>Category</label>
          <select
            className="form-control"
            value={category}
            onChange={(e) => setCategory(e.target.value)}
            required
          >
            <option value="">Select</option>
            <option value="Music">Music</option>
            <option value="Tech">Tech</option>
            <option value="Sports">Sports</option>
          </select>
        </div>
        <div className="mb-3">
          <label>Date</label>
          <input
            type="date"
            className="form-control"
            value={date}
            onChange={(e) => setDate(e.target.value)}
            required
          />
        </div>
        <div className="mb-3">
          <label>Location</label>
          <input
            type="text"
            className="form-control"
            value={location}
            onChange={(e) => setLocation(e.target.value)}
            required
          />
        </div>
        <button type="submit" className="btn btn-primary">
          Create Event
        </button>
      </form>
    </div>
  );
};

export default EventForm;

│   │   ├── App.js
import React, { useState } from 'react';
import Login from './components/Login';
import EventList from './components/EventList';
import EventForm from './components/EventForm';
import 'bootstrap/dist/css/bootstrap.min.css';

const App = () => {
  const [token, setToken] = useState(localStorage.getItem('token') || '');

  const handleLogout = () => {
    localStorage.removeItem('token');
    setToken('');
  };

  return (
    <div>
      <nav className="navbar navbar-expand-lg navbar-light bg-light">
        <div className="container">
          <a className="navbar-brand" href="/">EventSphere</a>
          {token && (
            <button className="btn btn-outline-danger" onClick={handleLogout}>
              Logout
            </button>
          )}
        </div>
      </nav>
      <div className="container mt-3">
        {!token ? (
          <Login setToken={(token) => {
            localStorage.setItem('token', token);
            setToken(token);
          }} />
        ) : (
          <>
            <EventForm token={token} />
            <EventList token={token} />
          </>
        )}
      </div>
    </div>
  );
};

export default App;

│   │   ├── index.js
import React from 'react';
import ReactDOM from 'react-dom';
import App from './App';

ReactDOM.render(<App />, document.getElementById('root'));

│   ├── package.json
{
  "name": "eventsphere-frontend",
  "version": "0.1.0",
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "dependencies": {
    "axios": "^0.24.0",
    "bootstrap": "^5.1.3",
    "react": "^17.0.2",
    "react-dom": "^17.0.2",
    "react-scripts": "4.0.3"
  },
  "browserslist": {
    "production": [">0.2%", "not dead", "not op_mini all"],
    "development": ["last 1 chrome version", "last 1 firefox version", "last 1 safari version"]
  }
}

├── .gitlab-ci.yml
stages:
  - test
  - deploy

test:
  stage: test
  image: node:16
  script:
    - cd backend
    - npm install
    - npm test
    - cd ../frontend
    - npm install
    - npm test
  only:
    - branches

deploy:
  stage: deploy
  image: node:16
  script:
    - cd backend
    - npm install
    - echo "Deploy to Heroku (configure Heroku CLI and git remote)"
  only:
    - main

├── .gitignore
node_modules/
.env
dist/
*.log
build/

├── README.md
# EventSphere

A web app for discovering and joining local events.

## Setup

1. **Backend**:
   - Navigate to `backend/`.
   - Run `npm install`.
   - Create a `.env` file with `MONGODB_URI=<your-mongodb-uri>` and `JWT_SECRET=your-secret-key`.
   - Run `npm start`.

2. **Frontend**:
   - Navigate to `frontend/`.
   - Run `npm install`.
   - Run `npm start`.

3. **Deployment**:
   - Deploy backend to Heroku.
   - Deploy frontend to Netlify or Heroku.

## Technologies
- MERN Stack (MongoDB, Express.js, React, Node.js)
- Bootstrap for styling
- JWT for authentication

## Data Structures
- Arrays: Event lists in UI
- Objects: MongoDB documents
- HashMap: Category caching